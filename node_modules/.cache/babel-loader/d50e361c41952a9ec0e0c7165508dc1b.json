{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { RISK_MATRIX_ACTION_TYPES, riskMatrixActions } from \"./actions\";\nimport fetchApi from \"../../../common/networking\";\nexport function* getRiskMatrixSaga() {\n  try {\n    const response = yield call(fetchApi, \"http://localhost:9000/v1/intervenants?requestId=wr\");\n    yield put(riskMatrixActions.getRiskMatrixSuccess(response));\n  } catch (e) {\n    yield put(riskMatrixActions.getRiskMatrixError(e));\n  }\n}\n\nfunction* watchRiskMatrixSaga() {\n  yield all([takeLatest(RISK_MATRIX_ACTION_TYPES.GET_RISK_MATRIX, getRiskMatrixSaga)]);\n}\n\nexport default watchRiskMatrixSaga;","map":{"version":3,"sources":["/home/taaha/Serious_project/Pfa/code/test/Front-rsk-management/front_risk_management/src/containers/RiskManagerContainer/redux/sagas.js"],"names":["all","call","put","takeLatest","RISK_MATRIX_ACTION_TYPES","riskMatrixActions","fetchApi","getRiskMatrixSaga","response","getRiskMatrixSuccess","e","getRiskMatrixError","watchRiskMatrixSaga","GET_RISK_MATRIX"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAAQC,wBAAR,EAAkCC,iBAAlC,QAA0D,WAA1D;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAO,UAAUC,iBAAV,GAA8B;AACjC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACK,QAAD,EAAW,oDAAX,CAA3B;AACA,UAAMJ,GAAG,CAACG,iBAAiB,CAACI,oBAAlB,CAAuCD,QAAvC,CAAD,CAAT;AACH,GAHD,CAGE,OAAOE,CAAP,EAAU;AACR,UAAMR,GAAG,CAACG,iBAAiB,CAACM,kBAAlB,CAAqCD,CAArC,CAAD,CAAT;AACH;AACJ;;AAED,UAAUE,mBAAV,GAAgC;AAC5B,QAAMZ,GAAG,CAAC,CACNG,UAAU,CAACC,wBAAwB,CAACS,eAA1B,EAA2CN,iBAA3C,CADJ,CAAD,CAAT;AAGH;;AAED,eAAeK,mBAAf","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport {RISK_MATRIX_ACTION_TYPES, riskMatrixActions} from \"./actions\";\nimport fetchApi from \"../../../common/networking\";\n\nexport function* getRiskMatrixSaga() {\n    try {\n        const response = yield call(fetchApi, \"http://localhost:9000/v1/intervenants?requestId=wr\");\n        yield put(riskMatrixActions.getRiskMatrixSuccess(response));\n    } catch (e) {\n        yield put(riskMatrixActions.getRiskMatrixError(e));\n    }\n}\n\nfunction* watchRiskMatrixSaga() {\n    yield all([\n        takeLatest(RISK_MATRIX_ACTION_TYPES.GET_RISK_MATRIX, getRiskMatrixSaga)\n    ]);\n}\n\nexport default watchRiskMatrixSaga;"]},"metadata":{},"sourceType":"module"}
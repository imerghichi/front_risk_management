{"ast":null,"code":"import createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers/rootReducer';\nimport logger from \"./middleware/logger\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport monitorReducerEnhancer from \"./middleware/monitorReducer\";\nimport isProduction from \"../../environement\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootSaga from \"../sagas/rootSaga\";\nimport history from \"../../history\";\nexport default function configureAppStore() {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, logger];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const enhancers = [middlewareEnhancer, monitorReducerEnhancer];\n  const composeFunc = isProduction() ? compose : composeWithDevTools;\n  const composeEnhancers = composeFunc(...enhancers);\n  const store = createStore(rootReducer(history), composeEnhancers);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n;","map":{"version":3,"sources":["/home/taaha/Serious_project/Pfa/code/test/Front-rsk-management/front_risk_management/src/common/redux/store/configureStore.js"],"names":["createSagaMiddleware","rootReducer","logger","applyMiddleware","compose","createStore","monitorReducerEnhancer","isProduction","composeWithDevTools","rootSaga","history","configureAppStore","sagaMiddleware","middlewares","middlewareEnhancer","enhancers","composeFunc","composeEnhancers","store","run"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAExC,QAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AAEA,QAAMa,WAAW,GAAG,CAACD,cAAD,EAAiBV,MAAjB,CAApB;AACA,QAAMY,kBAAkB,GAAGX,eAAe,CAAC,GAAGU,WAAJ,CAA1C;AACA,QAAME,SAAS,GAAG,CAACD,kBAAD,EAAqBR,sBAArB,CAAlB;AAEA,QAAMU,WAAW,GAAGT,YAAY,KAAKH,OAAL,GAAeI,mBAA/C;AAEA,QAAMS,gBAAgB,GAAGD,WAAW,CAAC,GAAGD,SAAJ,CAApC;AACA,QAAMG,KAAK,GAAGb,WAAW,CAACJ,WAAW,CAACS,OAAD,CAAZ,EAAuBO,gBAAvB,CAAzB;AAEAL,EAAAA,cAAc,CAACO,GAAf,CAAmBV,QAAnB;AAEA,SAAOS,KAAP;AACH;AAAA","sourcesContent":["import createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers/rootReducer'\nimport logger from \"./middleware/logger\";\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport monitorReducerEnhancer from \"./middleware/monitorReducer\";\nimport isProduction from \"../../environement\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport rootSaga from \"../sagas/rootSaga\";\nimport history from \"../../history\";\n\nexport default function configureAppStore() {\n\n    const sagaMiddleware = createSagaMiddleware();\n\n    const middlewares = [sagaMiddleware, logger];\n    const middlewareEnhancer = applyMiddleware(...middlewares);\n    const enhancers = [middlewareEnhancer, monitorReducerEnhancer];\n\n    const composeFunc = isProduction() ? compose : composeWithDevTools;\n\n    const composeEnhancers = composeFunc(...enhancers);\n    const store = createStore(rootReducer(history), composeEnhancers);\n\n    sagaMiddleware.run(rootSaga);\n\n    return store\n};"]},"metadata":{},"sourceType":"module"}